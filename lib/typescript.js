"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
const dopees_chain_1 = require("dopees-chain");
const fspath = require("path");
const extTs = /\.ts$/;
const extJs = /\.js$/;
class TranspilerState {
    constructor(options) {
        this.sourceResolver = dopees_chain_1.ReversePathResolver.from({
            sourceRoot: options.sourceRoot,
            sourceExt: 'ts',
            targetRoot: options.distRoot,
            targetExt: 'js'
        });
        this.selector = (path, context) => {
            const distRoot = fspath.isAbsolute(options.distRoot) ? options.distRoot : fspath.normalize(fspath.join(context.basePath, options.distRoot));
            return path.endsWith('.js') && path.startsWith(distRoot);
        };
        this.innerStateKey = 'typescript.source';
        this.compilerOptions = options.compilerOptions;
    }
}
class TypeScriptTranspiler extends dopees_chain_1.derived.FileMapper {
    constructor() {
        super(...arguments);
        this.name = 'typescript';
    }
    generate(state, _task, innerState, _context) {
        const result = ts.transpileModule(innerState.sourceCode, {
            fileName: innerState.sourcePath,
            compilerOptions: {
                lib: ["es6", "dom", "esnext.asynciterable"],
                target: ts.ScriptTarget.ESNext,
                module: ts.ModuleKind.ESNext,
                inlineSourceMap: true,
                inlineSources: true,
                strict: true,
                moduleResolution: ts.ModuleResolutionKind.NodeJs,
                ...state.compilerOptions
            }
        });
        return Buffer.from(result.outputText, 'utf-8');
    }
    async readSource(_, task, context) {
        const sourceCode = await context.getContents(task, 'utf-8');
        const sourcePath = task.name.path;
        return { sourceCode, sourcePath };
    }
    init(options) {
        return new TranspilerState(options);
    }
}
exports.TypeScriptTranspiler = TypeScriptTranspiler;
function typescript(opts) {
    if (!opts) {
        throw new Error('options mut be specified');
    }
    return new TypeScriptTranspiler().createExecutor(opts);
}
exports.typescript = typescript;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90eXBlc2NyaXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQWlDO0FBQ2pDLCtDQUFpSDtBQUNqSCwrQkFBK0I7QUFhL0IsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDO0FBQ3RCLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQztBQU90QixNQUFNLGVBQWU7SUFLbkIsWUFBWSxPQUFnQjtRQUMxQixJQUFJLENBQUMsY0FBYyxHQUFHLGtDQUFtQixDQUFDLElBQUksQ0FBQztZQUM3QyxVQUFVLEVBQUUsT0FBTyxDQUFDLFVBQVU7WUFDOUIsU0FBUyxFQUFFLElBQUk7WUFDZixVQUFVLEVBQUUsT0FBTyxDQUFDLFFBQVE7WUFDNUIsU0FBUyxFQUFFLElBQUk7U0FDaEIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQVksRUFBRSxPQUFnQixFQUFFLEVBQUU7WUFDakQsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzVJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNELENBQUMsQ0FBQztRQUNGLElBQUksQ0FBQyxhQUFhLEdBQUcsbUJBQW1CLENBQUM7UUFDekMsSUFBSSxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDO0lBQ2pELENBQUM7Q0FDRjtBQUVELE1BQWEsb0JBQXFCLFNBQVEsc0JBQU8sQ0FBQyxVQUFnRDtJQUFsRzs7UUFDRSxTQUFJLEdBQUcsWUFBWSxDQUFDO0lBMkJ0QixDQUFDO0lBMUJXLFFBQVEsQ0FBQyxLQUFzQixFQUFFLEtBQVcsRUFBRSxVQUFzQixFQUFFLFFBQWlCO1FBQy9GLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRTtZQUN2RCxRQUFRLEVBQUUsVUFBVSxDQUFDLFVBQVU7WUFDL0IsZUFBZSxFQUFFO2dCQUNmLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsc0JBQXNCLENBQUM7Z0JBQzNDLE1BQU0sRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU07Z0JBQzlCLE1BQU0sRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU07Z0JBQzVCLGVBQWUsRUFBRSxJQUFJO2dCQUNyQixhQUFhLEVBQUUsSUFBSTtnQkFDbkIsTUFBTSxFQUFFLElBQUk7Z0JBQ1osZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLG9CQUFvQixDQUFDLE1BQU07Z0JBQ2hELEdBQUcsS0FBSyxDQUFDLGVBQWU7YUFDekI7U0FDRixDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRVMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFNLEVBQUUsSUFBVSxFQUFFLE9BQWdCO1FBQzdELE1BQU0sVUFBVSxHQUFHLE1BQU0sT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDNUQsTUFBTSxVQUFVLEdBQWMsSUFBSSxDQUFDLElBQUssQ0FBQyxJQUFJLENBQUM7UUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRVMsSUFBSSxDQUFDLE9BQWdCO1FBQzdCLE9BQU8sSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQUNGO0FBNUJELG9EQTRCQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxJQUFhO0lBQ3RDLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7S0FDN0M7SUFDRCxPQUFPLElBQUksb0JBQW9CLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekQsQ0FBQztBQUxELGdDQUtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5pbXBvcnQgeyBUYXNrLCBDb250ZXh0LCBGaWxlTmFtZSwgSGVscGVycyBhcyBoLCBkZXJpdmVkLCBQYXRoUmVzb2x2ZXIsIFJldmVyc2VQYXRoUmVzb2x2ZXIgfSBmcm9tICdkb3BlZXMtY2hhaW4nO1xuaW1wb3J0ICogYXMgZnNwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQ29tcGlsZXJPcHRpb25zIH0gZnJvbSAndHlwZXNjcmlwdCc7XG5cbi8vIHJlLWV4cG9ydFxuZXhwb3J0IHsgQ29tcGlsZXJPcHRpb25zIH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3B0aW9ucyB7XG4gIC8vc291cmNlUmVzb2x2ZXI/OiAocGF0aDogc3RyaW5nLCBiYXNlUGF0aD86IHN0cmluZykgPT4gc3RyaW5nO1xuICBzb3VyY2VSb290OiBzdHJpbmcsXG4gIGRpc3RSb290OiBzdHJpbmcsXG4gIGNvbXBpbGVyT3B0aW9ucz86IENvbXBpbGVyT3B0aW9uc1xufVxuXG5jb25zdCBleHRUcyA9IC9cXC50cyQvO1xuY29uc3QgZXh0SnMgPSAvXFwuanMkLztcblxuaW50ZXJmYWNlIFNvdXJjZUluZm8ge1xuICBzb3VyY2VDb2RlOiBzdHJpbmc7XG4gIHNvdXJjZVBhdGg6IHN0cmluZztcbn1cblxuY2xhc3MgVHJhbnNwaWxlclN0YXRlIGltcGxlbWVudHMgZGVyaXZlZC5GaWxlTWFwcGVyU3RhdGUge1xuICBzb3VyY2VSZXNvbHZlcjogUGF0aFJlc29sdmVyO1xuICBzZWxlY3RvcjogKHBhdGg6IHN0cmluZywgY29udGV4dDogQ29udGV4dCkgPT4gYm9vbGVhbjtcbiAgaW5uZXJTdGF0ZUtleTogc3RyaW5nO1xuICBjb21waWxlck9wdGlvbnM/OiBDb21waWxlck9wdGlvbnM7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IE9wdGlvbnMpIHtcbiAgICB0aGlzLnNvdXJjZVJlc29sdmVyID0gUmV2ZXJzZVBhdGhSZXNvbHZlci5mcm9tKHtcbiAgICAgIHNvdXJjZVJvb3Q6IG9wdGlvbnMuc291cmNlUm9vdCxcbiAgICAgIHNvdXJjZUV4dDogJ3RzJyxcbiAgICAgIHRhcmdldFJvb3Q6IG9wdGlvbnMuZGlzdFJvb3QsXG4gICAgICB0YXJnZXRFeHQ6ICdqcydcbiAgICB9KTtcbiAgICB0aGlzLnNlbGVjdG9yID0gKHBhdGg6IHN0cmluZywgY29udGV4dDogQ29udGV4dCkgPT4ge1xuICAgICAgY29uc3QgZGlzdFJvb3QgPSBmc3BhdGguaXNBYnNvbHV0ZShvcHRpb25zLmRpc3RSb290KSA/IG9wdGlvbnMuZGlzdFJvb3QgOiBmc3BhdGgubm9ybWFsaXplKGZzcGF0aC5qb2luKGNvbnRleHQuYmFzZVBhdGgsIG9wdGlvbnMuZGlzdFJvb3QpKTtcbiAgICAgIHJldHVybiBwYXRoLmVuZHNXaXRoKCcuanMnKSAmJiBwYXRoLnN0YXJ0c1dpdGgoZGlzdFJvb3QpO1xuICAgIH07XG4gICAgdGhpcy5pbm5lclN0YXRlS2V5ID0gJ3R5cGVzY3JpcHQuc291cmNlJztcbiAgICB0aGlzLmNvbXBpbGVyT3B0aW9ucyA9IG9wdGlvbnMuY29tcGlsZXJPcHRpb25zO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUeXBlU2NyaXB0VHJhbnNwaWxlciBleHRlbmRzIGRlcml2ZWQuRmlsZU1hcHBlcjxPcHRpb25zLCBTb3VyY2VJbmZvLCBUcmFuc3BpbGVyU3RhdGU+IHtcbiAgbmFtZSA9ICd0eXBlc2NyaXB0JztcbiAgcHJvdGVjdGVkIGdlbmVyYXRlKHN0YXRlOiBUcmFuc3BpbGVyU3RhdGUsIF90YXNrOiBUYXNrLCBpbm5lclN0YXRlOiBTb3VyY2VJbmZvLCBfY29udGV4dDogQ29udGV4dCk6IEJ1ZmZlciB8IFByb21pc2U8QnVmZmVyPiB7XG4gICAgY29uc3QgcmVzdWx0ID0gdHMudHJhbnNwaWxlTW9kdWxlKGlubmVyU3RhdGUuc291cmNlQ29kZSwge1xuICAgICAgZmlsZU5hbWU6IGlubmVyU3RhdGUuc291cmNlUGF0aCxcbiAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xuICAgICAgICBsaWI6IFtcImVzNlwiLCBcImRvbVwiLCBcImVzbmV4dC5hc3luY2l0ZXJhYmxlXCJdLFxuICAgICAgICB0YXJnZXQ6IHRzLlNjcmlwdFRhcmdldC5FU05leHQsXG4gICAgICAgIG1vZHVsZTogdHMuTW9kdWxlS2luZC5FU05leHQsXG4gICAgICAgIGlubGluZVNvdXJjZU1hcDogdHJ1ZSxcbiAgICAgICAgaW5saW5lU291cmNlczogdHJ1ZSxcbiAgICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgICBtb2R1bGVSZXNvbHV0aW9uOiB0cy5Nb2R1bGVSZXNvbHV0aW9uS2luZC5Ob2RlSnMsXG4gICAgICAgIC4uLnN0YXRlLmNvbXBpbGVyT3B0aW9uc1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShyZXN1bHQub3V0cHV0VGV4dCwgJ3V0Zi04Jyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgcmVhZFNvdXJjZShfOiBhbnksIHRhc2s6IFRhc2ssIGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICBjb25zdCBzb3VyY2VDb2RlID0gYXdhaXQgY29udGV4dC5nZXRDb250ZW50cyh0YXNrLCAndXRmLTgnKTtcbiAgICBjb25zdCBzb3VyY2VQYXRoID0gKDxGaWxlTmFtZT50YXNrLm5hbWUpLnBhdGg7XG4gICAgcmV0dXJuIHsgc291cmNlQ29kZSwgc291cmNlUGF0aCB9O1xuICB9XG5cbiAgcHJvdGVjdGVkIGluaXQob3B0aW9uczogT3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgVHJhbnNwaWxlclN0YXRlKG9wdGlvbnMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0eXBlc2NyaXB0KG9wdHM6IE9wdGlvbnMpIHtcbiAgaWYgKCFvcHRzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdvcHRpb25zIG11dCBiZSBzcGVjaWZpZWQnKTtcbiAgfVxuICByZXR1cm4gbmV3IFR5cGVTY3JpcHRUcmFuc3BpbGVyKCkuY3JlYXRlRXhlY3V0b3Iob3B0cyk7XG59Il19