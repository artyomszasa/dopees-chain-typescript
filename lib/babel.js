"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const babel = require("@babel/core");
const dopees_chain_1 = require("dopees-chain");
const fspath = require("path");
const fs = require("fs");
const t = require("@babel/types");
const traverse_1 = require("@babel/traverse");
const fsp = fs.promises;
const asDefaultImport = (node) => {
    if (1 == node.specifiers.length && 'ImportDefaultSpecifier' === node.specifiers[0].type) {
        return {
            id: node.specifiers[0].local,
            source: node.source.value,
            eq(other) {
                return this.id === other.id && this.source === other.source;
            }
        };
    }
    return null;
};
const findDefaultImports = (ast, action) => {
    return traverse_1.default(ast, {
        ImportDeclaration(path) {
            const node = path.node;
            const decl = asDefaultImport(node);
            if (null !== decl) {
                action(decl, path);
            }
        }
    });
};
const findAllDependencies = (ast, action) => {
    return traverse_1.default(ast, {
        ImportDeclaration(path) {
            const node = path.node;
            action(node.source.value);
        }
    });
};
const walkAllDependencies = (ast, action) => {
    return traverse_1.default(ast, {
        ImportDeclaration(path) {
            const node = path.node;
            const replacement = action(node);
            if (replacement) {
                path.replaceWith(replacement);
            }
        }
    });
};
var Options;
(function (Options) {
    Options.defaultAllDependenciesKey = 'js.all.dependencies';
})(Options = exports.Options || (exports.Options = {}));
// export interface DependencyEntry {
//   mtime: Date,
//   source: string,
//   dependency: string;
// }
var DependencyHelper;
(function (DependencyHelper) {
    const sync = new dopees_chain_1.mutex.Mutex();
    async function getDependencies(context, key) {
        const deps = await context.storage.getObject(key || Options.defaultAllDependenciesKey);
        return deps || [];
    }
    DependencyHelper.getDependencies = getDependencies;
    function storeDependencies(context, deps, key) {
        return context.storage.setObject(key || Options.defaultAllDependenciesKey, deps);
    }
    async function clearDependencies(context, source, key) {
        await sync.lock();
        try {
            const deps = (await getDependencies(context, key)).splice(0);
            let index;
            while (-1 !== (index = deps.findIndex(e => e.source === source))) {
                deps.splice(index, 1);
            }
            await storeDependencies(context, deps, key);
        }
        finally {
            sync.release();
        }
    }
    async function setDependencies(context, arg1, arg2, arg3, arg4) {
        let path;
        let mtime;
        let dependencies;
        let key;
        if (arg1 instanceof dopees_chain_1.Task) {
            if (!Array.isArray(arg2)) {
                throw new TypeError('dependencies must be an array value');
            }
            if ('string' !== typeof arg3) {
                throw new TypeError('key must be a string value');
            }
            if (arg1.name instanceof dopees_chain_1.FileName) {
                path = arg1.name.path;
                mtime = await dopees_chain_1.Helpers.getMtime(arg1, context).then(mtime => { if (mtime) {
                    return mtime;
                }
                else {
                    throw new Error(`unable to get mtime for ${arg1.name}`);
                } });
                dependencies = arg2;
                key = arg3;
            }
            else {
                throw new Error(`task must be file related: ${arg1.name}`);
            }
        }
        else {
            if (!(arg2 instanceof Date)) {
                throw new TypeError('mtime must be a date value');
            }
            if (undefined === arg3 || 'string' === typeof arg3) {
                throw new TypeError('dependencies must be an array value');
            }
            path = arg1;
            mtime = arg2;
            dependencies = arg3;
            key = arg4;
        }
        // do add
        await sync.lock();
        try {
            const deps = (await getDependencies(context, key)).splice(0);
            let index;
            while (-1 !== (index = deps.findIndex(e => e.source === path))) {
                deps.splice(index, 1);
            }
            deps.push({
                mtime: mtime,
                source: path,
                dependencies: dependencies
            });
            await storeDependencies(context, deps, key);
        }
        finally {
            sync.release();
        }
    }
    DependencyHelper.setDependencies = setDependencies;
})(DependencyHelper = exports.DependencyHelper || (exports.DependencyHelper = {}));
const extJs = /\.js$/;
function inlineView(opts) {
    if (!opts) {
        throw new Error('options mut be specified');
    }
    return async (task, context) => {
        const sourceRoot = fspath.normalize(fspath.isAbsolute(opts.sourceRoot) ? opts.sourceRoot : fspath.join(context.basePath, opts.sourceRoot));
        const distRoot = fspath.normalize(fspath.isAbsolute(opts.distRoot) ? opts.distRoot : fspath.join(context.basePath, opts.distRoot));
        const name = task.name;
        // [inlined js <--- js] case
        if (name instanceof dopees_chain_1.FileName && extJs.test(name.path) && name.path.startsWith(distRoot)) {
            const startTs = Date.now();
            // context.log('babel:dopees', task, 'starting...');
            const sourcePath = fspath.resolve(fspath.join(sourceRoot, fspath.relative(distRoot, name.path)));
            let sourceTask = dopees_chain_1.Task.file(sourcePath, context.basePath);
            context.log('babel:dopees', task, `resolved source => ${sourceTask.name}`);
            // execute dependency (.ts), possibly triggering subdependencies....
            sourceTask = await context.execute(sourceTask);
            const sourceName = sourceTask.name;
            let tryUsingCachedAst = false;
            // check if file already exists...
            let sourceMtime = null;
            let mtime = await fsp.stat(name.path).then(stats => stats.mtime, () => null);
            if (mtime) {
                // check if source if older (no direct mtime as some dependency of the source could have changed instead of
                // the source itself)...
                sourceMtime = await dopees_chain_1.Helpers.getMtime(sourceTask, context);
                if (sourceMtime && sourceMtime <= mtime) {
                    // no need to parse ast --> it is unchanged, though inlined contents may have changed...
                    context.log('typescript', task, 'up to date');
                    tryUsingCachedAst = true;
                }
            }
            let cachedAst = null;
            if (sourceMtime && tryUsingCachedAst) {
                const cache = await context.storage.getObject(`!babel:ast!${sourceName.path}`);
                if (cache && cache.mtime >= sourceMtime) {
                    cachedAst = cache.ast;
                }
            }
            const babelOptions = {
                filename: name.path,
                ast: true,
                root: name.basePath || context.basePath,
                rootMode: 'root',
                plugins: ['@babel/syntax-dynamic-import'],
                inputSourceMap: true,
                sourceMaps: 'inline',
                parserOpts: {
                    sourceType: 'module'
                }
            };
            let ast;
            let sourceCode = null;
            if (cachedAst) {
                context.log('babel:dopees', task, 'using cached ast');
                ast = cachedAst;
            }
            else {
                sourceCode = await context.getContents(sourceTask, 'utf-8');
                context.log('babel:dopees', task, 'parsing...');
                ast = await babel.parseAsync(sourceCode, babelOptions);
                context.log('babel:dopees', task, 'done parsing');
                if (sourceMtime) {
                    await context.storage.setObject(`!babel:ast!${sourceName.path}`, { mtime: sourceMtime, ast });
                }
            }
            // collect inlineables
            const toInline = [];
            findDefaultImports(ast, (decl) => {
                const { id, source } = decl;
                if (source.endsWith('.pug')) {
                    // get full path of the include
                    const initialFolder = fspath.dirname(sourceTask.name.path);
                    const htmlPath = fspath.normalize(fspath.join(initialFolder, source.replace(/\.pug$/, '.html')));
                    toInline.push({ htmlPath, id, source });
                }
            });
            const htmls = [];
            const subtasks = [];
            await Promise.all(toInline.map(async (item, index) => {
                const relativePath = fspath.relative(context.basePath, item.htmlPath);
                const subtask = dopees_chain_1.Task.file(relativePath, context.basePath);
                subtasks[index] = subtask;
                htmls[index] = await context.getContents(await context.execute(subtask), 'utf-8');
            }));
            context.log('babel:dopees', task, 'inlining');
            // all cahnges are performed on copy, original ast is cached...
            ast = t.cloneDeep(ast);
            // inline views.
            findDefaultImports(ast, (decl, path) => {
                const { id, source } = decl;
                const inlineableIndex = toInline.findIndex(e => e.id.name === id.name && e.source === source);
                if (-1 !== inlineableIndex) {
                    context.log('babel:dopees', task, `inlining ${source}`);
                    const html = htmls[inlineableIndex];
                    path.replaceWith(t.variableDeclaration('const', [
                        t.variableDeclarator(id, t.stringLiteral(html))
                    ]));
                }
            });
            // ensure .js in imports
            walkAllDependencies(ast, (node) => {
                const importPath = node.source.value;
                if (importPath && !importPath.endsWith('.js')) {
                    if (true === opts.updateExternalImports && !importPath.startsWith('./') && !importPath.startsWith('../')) {
                        let target = fspath.join(fspath.relative(fspath.dirname(name.path), opts.distRoot), importPath + '.js');
                        // same folder dependencies should start with ./
                        if (!target.startsWith('..')) {
                            target = './' + target;
                        }
                        node.source.value = target;
                    }
                    else {
                        node.source.value += '.js';
                    }
                }
            });
            const res = await babel.transformFromAstAsync(ast, sourceCode || await context.getContents(sourceTask, 'utf-8'), babelOptions);
            context.log('babel:dopees', task, 'storing js');
            const result = await context.saveContents(task, Buffer.from(res.code, 'utf-8'), true);
            // save output ast
            await context.storage.setObject(`!babel:ast!${name.path}`, { mtime, ast });
            context.log('babel:dopees', task, 'done', Date.now() - startTs);
            // collect all depepndencies if requested
            if (true === opts.saveAllDependencies) {
                const deps = [];
                findAllDependencies(ast, (source) => deps.push(source));
                await DependencyHelper.setDependencies(context, task, deps, opts.allDependenciesKey);
            }
            return result;
        }
    };
}
exports.inlineView = inlineView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFiZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYmFiZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBcUM7QUFDckMsK0NBQXNGO0FBQ3RGLCtCQUErQjtBQUMvQix5QkFBeUI7QUFDekIsa0NBQWtDO0FBQ2xDLDhDQUF5RDtBQUV6RCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDO0FBUXhCLE1BQU0sZUFBZSxHQUFHLENBQUMsSUFBeUIsRUFBMEIsRUFBRTtJQUM1RSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sSUFBSSx3QkFBd0IsS0FBSyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRTtRQUNyRixPQUFPO1lBQ0gsRUFBRSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSztZQUM1QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLO1lBQ3pCLEVBQUUsQ0FBQyxLQUF3QjtnQkFDdkIsT0FBTyxJQUFJLENBQUMsRUFBRSxLQUFLLEtBQUssQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQ2hFLENBQUM7U0FDSixDQUFDO0tBQ0w7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQTtBQUVELE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxHQUFXLEVBQUUsTUFBa0YsRUFBRSxFQUFFO0lBQzdILE9BQU8sa0JBQVEsQ0FBQyxHQUFHLEVBQUU7UUFDakIsaUJBQWlCLENBQUMsSUFBSTtZQUNwQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3ZCLE1BQU0sSUFBSSxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNuQyxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7Z0JBQ2YsTUFBTSxDQUFDLElBQUks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WUFBWSxDQUFDLENBQUM7WUFDaEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdEYsa0JBQWtCO1lBQ2xCLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsY0FBYyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQWEsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtZQUNyRixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUMsQ0FBQztZQUNoRSx5Q0FBeUM7WUFDekMsSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLG1CQUFtQixFQUFFO2dCQUNyQyxNQUFNLElBQUksR0FBYSxFQUFFLENBQUM7Z0JBQzFCLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNoRSxNQUFNLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQzthQUN0RjtZQUNELE9BQU8sTUFBTSxDQUFDO1NBQ2Y7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDO0FBeklELGdDQXlJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGJhYmVsIGZyb20gJ0BiYWJlbC9jb3JlJztcbmltcG9ydCB7IEV4ZWN1dG9yLCBUYXNrLCBDb250ZXh0LCBGaWxlTmFtZSwgSGVscGVycyBhcyBoLCBtdXRleCB9IGZyb20gJ2RvcGVlcy1jaGFpbic7XG5pbXBvcnQgKiBhcyBmc3BhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyB0IGZyb20gJ0BiYWJlbC90eXBlcyc7XG5pbXBvcnQgdHJhdmVyc2UsIHsgVHJhdmVyc2VQYXRoIH0gZnJvbSAnQGJhYmVsL3RyYXZlcnNlJztcblxuY29uc3QgZnNwID0gZnMucHJvbWlzZXM7XG5cbmludGVyZmFjZSBEZWZhdWx0SW1wb3J0RGF0YSB7XG4gIGlkOiB0LklkZW50aWZpZXIsXG4gIHNvdXJjZTogc3RyaW5nLFxuICBlcShvdGhlcjogRGVmYXVsdEltcG9ydERhdGEpOiBib29sZWFuO1xufVxuXG5jb25zdCBhc0RlZmF1bHRJbXBvcnQgPSAobm9kZTogdC5JbXBvcnREZWNsYXJhdGlvbik6IERlZmF1bHRJbXBvcnREYXRhfG51bGwgPT4ge1xuICBpZiAoMSA9PSBub2RlLnNwZWNpZmllcnMubGVuZ3RoICYmICdJbXBvcnREZWZhdWx0U3BlY2lmaWVyJyA9PT0gbm9kZS5zcGVjaWZpZXJzWzBdLnR5cGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQ6IG5vZGUuc3BlY2lmaWVyc1swXS5sb2NhbCxcbiAgICAgICAgICBzb3VyY2U6IG5vZGUuc291cmNlLnZhbHVlLFxuICAgICAgICAgIGVxKG90aGVyOiBEZWZhdWx0SW1wb3J0RGF0YSkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pZCA9PT0gb3RoZXIuaWQgJiYgdGhpcy5zb3VyY2UgPT09IG90aGVyLnNvdXJjZTtcbiAgICAgICAgICB9XG4gICAgICB9O1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBmaW5kRGVmYXVsdEltcG9ydHMgPSAoYXN0OiB0Lk5vZGUsIGFjdGlvbjogKGRlY2w6IERlZmF1bHRJbXBvcnREYXRhLCBwYXRoOiBUcmF2ZXJzZVBhdGg8dC5JbXBvcnREZWNsYXJhdGlvbj4pID0+IHZvaWQpID0+IHtcbiAgcmV0dXJuIHRyYXZlcnNlKGFzdCwge1xuICAgICAgSW1wb3J0RGVjbGFyYXRpb24ocGF0aCkge1xuICAgICAgICBjb25zdCBub2RlID0gcGF0aC5ub2RlO1xuICAgICAgICBjb25zdCBkZWNsID0gYXNEZWZhdWx0SW1wb3J0KG5vZGUpO1xuICAgICAgICBpZiAobnVsbCAhPT0gZGVjbCkge1xuICAgICAgICAgICAgYWN0aW9uKGRlY2wsIHBhdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gIH0pXG59O1xuXG5jb25zdCBmaW5kQWxsRGVwZW5kZW5jaWVzID0gKGFzdDogdC5Ob2RlLCBhY3Rpb246IChzb3VyY2U6IHN0cmluZykgPT4gdm9pZCkgPT4ge1xuICByZXR1cm4gdHJhdmVyc2UoYXN0LCB7XG4gICAgSW1wb3J0RGVjbGFyYXRpb24ocGF0aCkge1xuICAgICAgY29uc3Qgbm9kZSA9IHBhdGgubm9kZTtcbiAgICAgIGFjdGlvbihub2RlLnNvdXJjZS52YWx1ZSk7XG4gICAgfVxuICB9KTtcbn07XG5cbmNvbnN0IHdhbGtBbGxEZXBlbmRlbmNpZXMgPSAoYXN0OiB0Lk5vZGUsIGFjdGlvbjogKG5vZGU6IHQuSW1wb3J0RGVjbGFyYXRpb24pID0+IHQuSW1wb3J0RGVjbGFyYXRpb258dm9pZCkgPT4ge1xuICByZXR1cm4gdHJhdmVyc2UoYXN0LCB7XG4gICAgSW1wb3J0RGVjbGFyYXRpb24ocGF0aCkge1xuICAgICAgY29uc3Qgbm9kZSA9IHBhdGgubm9kZTtcbiAgICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gYWN0aW9uKG5vZGUpO1xuICAgICAgaWYgKHJlcGxhY2VtZW50KSB7XG4gICAgICAgIHBhdGgucmVwbGFjZVdpdGgocmVwbGFjZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMge1xuICBzb3VyY2VSb290OiBzdHJpbmc7XG4gIGRpc3RSb290OiBzdHJpbmc7XG4gIHNhdmVBbGxEZXBlbmRlbmNpZXM/OiBib29sZWFuO1xuICBhbGxEZXBlbmRlbmNpZXNLZXk/OiBzdHJpbmc7XG4gIHVwZGF0ZUV4dGVybmFsSW1wb3J0cz86IGJvb2xlYW5cbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBPcHRpb25zIHtcbiAgZXhwb3J0IGNvbnN0IGRlZmF1bHRBbGxEZXBlbmRlbmNpZXNLZXkgPSAnanMuYWxsLmRlcGVuZGVuY2llcyc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVwZW5kZW5jeUVudHJ5IHtcbiAgbXRpbWU6IERhdGUsXG4gIHNvdXJjZTogc3RyaW5nLFxuICBkZXBlbmRlbmNpZXM6IHN0cmluZ1tdXG59XG5cbi8vIGV4cG9ydCBpbnRlcmZhY2UgRGVwZW5kZW5jeUVudHJ5IHtcbi8vICAgbXRpbWU6IERhdGUsXG4vLyAgIHNvdXJjZTogc3RyaW5nLFxuLy8gICBkZXBlbmRlbmN5OiBzdHJpbmc7XG4vLyB9XG5cbmV4cG9ydCBuYW1lc3BhY2UgRGVwZW5kZW5jeUhlbHBlciB7XG5cbiAgY29uc3Qgc3luYyA9IG5ldyBtdXRleC5NdXRleCgpO1xuXG4gIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREZXBlbmRlbmNpZXMoY29udGV4dDogQ29udGV4dCwga2V5Pzogc3RyaW5nKSB7XG4gICAgY29uc3QgZGVwcyA9IGF3YWl0IGNvbnRleHQuc3RvcmFnZS5nZXRPYmplY3Q8RGVwZW5kZW5jeUVudHJ5W10+KGtleSB8fCBPcHRpb25zLmRlZmF1bHRBbGxEZXBlbmRlbmNpZXNLZXkpO1xuICAgIHJldHVybiBkZXBzIHx8IFtdO1xuICB9XG4gIGZ1bmN0aW9uIHN0b3JlRGVwZW5kZW5jaWVzKGNvbnRleHQ6IENvbnRleHQsIGRlcHM6IERlcGVuZGVuY3lFbnRyeVtdLCBrZXk/OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gY29udGV4dC5zdG9yYWdlLnNldE9iamVjdChrZXkgfHwgT3B0aW9ucy5kZWZhdWx0QWxsRGVwZW5kZW5jaWVzS2V5LCBkZXBzKTtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBjbGVhckRlcGVuZGVuY2llcyhjb250ZXh0OiBDb250ZXh0LCBzb3VyY2U6IHN0cmluZywga2V5Pzogc3RyaW5nKSB7XG4gICAgYXdhaXQgc3luYy5sb2NrKCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRlcHMgPSAoYXdhaXQgZ2V0RGVwZW5kZW5jaWVzKGNvbnRleHQsIGtleSkpLnNwbGljZSgwKTtcbiAgICAgIGxldCBpbmRleDogbnVtYmVyO1xuICAgICAgd2hpbGUgKC0xICE9PSAoaW5kZXggPSBkZXBzLmZpbmRJbmRleChlID0+IGUuc291cmNlID09PSBzb3VyY2UpKSkge1xuICAgICAgICBkZXBzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICBhd2FpdCBzdG9yZURlcGVuZGVuY2llcyhjb250ZXh0LCBkZXBzLCBrZXkpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzeW5jLnJlbGVhc2UoKTtcbiAgICB9XG4gIH1cbiAgLy8gZnVuY3Rpb24gYWRkRGVwZW5kZW5jeShjb250ZXh0OiBDb250ZXh0LCB0YXNrOiBUYXNrLCBkZXBlbmRlbmN5OiBzdHJpbmcsIGtleT86IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG4gIC8vIGZ1bmN0aW9uIGFkZERlcGVuZGVuY3koY29udGV4dDogQ29udGV4dCwgcGF0aDogc3RyaW5nLCBtdGltZTogRGF0ZSwgZGVwZW5kZW5jeTogc3RyaW5nLCBrZXk/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuICAvLyBhc3luYyBmdW5jdGlvbiBhZGREZXBlbmRlbmN5KGNvbnRleHQ6IENvbnRleHQsIGFyZzE6IFRhc2t8c3RyaW5nLCBhcmcyOiBzdHJpbmd8RGF0ZSwgYXJnMz86IHN0cmluZywgYXJnND86IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAvLyAgIGxldCBwYXRoOiBzdHJpbmc7XG4gIC8vICAgbGV0IG10aW1lOiBEYXRlO1xuICAvLyAgIGxldCBkZXBlbmRlbmN5OiBzdHJpbmc7XG4gIC8vICAgbGV0IGtleTogc3RyaW5nfHVuZGVmaW5lZDtcbiAgLy8gICBpZiAoYXJnMSBpbnN0YW5jZW9mIFRhc2spIHtcbiAgLy8gICAgIGlmICgnc3RyaW5nJyAhPSB0eXBlb2YgYXJnMikge1xuICAvLyAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkZXBlbmRlbmN5IG11c3QgYmUgYSBzdHJpbmcgdmFsdWUnKTtcbiAgLy8gICAgIH1cbiAgLy8gICAgIGlmIChhcmcxLm5hbWUgaW5zdGFuY2VvZiBGaWxlTmFtZSkge1xuICAvLyAgICAgICBwYXRoID0gYXJnMS5uYW1lLnBhdGg7XG4gIC8vICAgICAgIG10aW1lID0gYXdhaXQgaC5nZXRNdGltZShhcmcxLCBjb250ZXh0KS50aGVuKG10aW1lID0+IHsgaWYgKG10aW1lKSB7IHJldHVybiBtdGltZTsgfSBlbHNlIHsgdGhyb3cgbmV3IEVycm9yKGB1bmFibGUgdG8gZ2V0IG10aW1lIGZvciAke2FyZzEubmFtZX1gKTsgfSB9KTtcbiAgLy8gICAgICAgZGVwZW5kZW5jeSA9IGFyZzI7XG4gIC8vICAgICAgIGtleSA9IGFyZzM7XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHRhc2sgbXVzdCBiZSBmaWxlIHJlbGF0ZWQ6ICR7YXJnMS5uYW1lfWApO1xuICAvLyAgICAgfVxuICAvLyAgIH0gZWxzZSB7XG4gIC8vICAgICBpZiAoIShhcmcyIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgLy8gICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbXRpbWUgbXVzdCBiZSBhIGRhdGUgdmFsdWUnKTtcbiAgLy8gICAgIH1cbiAgLy8gICAgIGlmICh1bmRlZmluZWQgPT09IGFyZzMpIHtcbiAgLy8gICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGVwZW5kZW5jeSBtdXN0IGJlIGEgc3RyaW5nIHZhbHVlJyk7XG4gIC8vICAgICB9XG4gIC8vICAgICBwYXRoID0gYXJnMTtcbiAgLy8gICAgIG10aW1lID0gYXJnMjtcbiAgLy8gICAgIGRlcGVuZGVuY3kgPSBhcmczO1xuICAvLyAgICAga2V5ID0gYXJnNDtcbiAgLy8gICB9XG4gIC8vICAgLy8gZG8gYWRkXG4gIC8vICAgYXdhaXQgc3luYy5sb2NrKCk7XG4gIC8vICAgdHJ5IHtcbiAgLy8gICAgIGNvbnN0IGRlcHMgPSAoYXdhaXQgZ2V0RGVwZW5kZW5jaWVzKGNvbnRleHQsIGtleSkpLnNwbGljZSgwKTtcbiAgLy8gICAgIGNvbnN0IGluZGV4ID0gZGVwcy5maW5kSW5kZXgoZSA9PiBlLnNvdXJjZSA9PT0gcGF0aCAmJiBlLmRlcGVuZGVuY3kgPT09IGRlcGVuZGVuY3kpO1xuICAvLyAgICAgaWYgKC0xICE9PSBpbmRleCkge1xuICAvLyAgICAgICBkZXBzLnNwbGljZShpbmRleCwgMSk7XG4gIC8vICAgICB9XG4gIC8vICAgICBkZXBzLnB1c2goe1xuICAvLyAgICAgICBzb3VyY2U6IHBhdGgsXG4gIC8vICAgICAgIG10aW1lLFxuICAvLyAgICAgICBkZXBlbmRlbmN5XG4gIC8vICAgICB9KTtcbiAgLy8gICAgIGF3YWl0IHN0b3JlRGVwZW5kZW5jaWVzKGNvbnRleHQsIGRlcHMsIGtleSk7XG4gIC8vICAgfSBmaW5hbGx5IHtcbiAgLy8gICAgIHN5bmMucmVsZWFzZSgpO1xuICAvLyAgIH1cbiAgLy8gfVxuICBleHBvcnQgZnVuY3Rpb24gc2V0RGVwZW5kZW5jaWVzKGNvbnRleHQ6IENvbnRleHQsIHRhc2s6IFRhc2ssIGRlcGVuZGVuY2llczogc3RyaW5nW10sIGtleT86IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG4gIGV4cG9ydCBmdW5jdGlvbiBzZXREZXBlbmRlbmNpZXMoY29udGV4dDogQ29udGV4dCwgcGF0aDogc3RyaW5nLCBtdGltZTogRGF0ZSwgZGVwZW5kZW5jaWVzOiBzdHJpbmdbXSwga2V5Pzogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcbiAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldERlcGVuZGVuY2llcyhjb250ZXh0OiBDb250ZXh0LCBhcmcxOiBUYXNrfHN0cmluZywgYXJnMjogc3RyaW5nW118RGF0ZSwgYXJnMz86IHN0cmluZ1tdfHN0cmluZywgYXJnND86IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGxldCBwYXRoOiBzdHJpbmc7XG4gICAgbGV0IG10aW1lOiBEYXRlO1xuICAgIGxldCBkZXBlbmRlbmNpZXM6IHN0cmluZ1tdO1xuICAgIGxldCBrZXk6IHN0cmluZ3x1bmRlZmluZWQ7XG4gICAgaWYgKGFyZzEgaW5zdGFuY2VvZiBUYXNrKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJnMikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGVwZW5kZW5jaWVzIG11c3QgYmUgYW4gYXJyYXkgdmFsdWUnKTtcbiAgICAgIH1cbiAgICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZzMpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigna2V5IG11c3QgYmUgYSBzdHJpbmcgdmFsdWUnKTtcbiAgICAgIH1cbiAgICAgIGlmIChhcmcxLm5hbWUgaW5zdGFuY2VvZiBGaWxlTmFtZSkge1xuICAgICAgICBwYXRoID0gYXJnMS5uYW1lLnBhdGg7XG4gICAgICAgIG10aW1lID0gYXdhaXQgaC5nZXRNdGltZShhcmcxLCBjb250ZXh0KS50aGVuKG10aW1lID0+IHsgaWYgKG10aW1lKSB7IHJldHVybiBtdGltZTsgfSBlbHNlIHsgdGhyb3cgbmV3IEVycm9yKGB1bmFibGUgdG8gZ2V0IG10aW1lIGZvciAke2FyZzEubmFtZX1gKTsgfSB9KTtcbiAgICAgICAgZGVwZW5kZW5jaWVzID0gYXJnMjtcbiAgICAgICAga2V5ID0gYXJnMztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdGFzayBtdXN0IGJlIGZpbGUgcmVsYXRlZDogJHthcmcxLm5hbWV9YCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghKGFyZzIgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtdGltZSBtdXN0IGJlIGEgZGF0ZSB2YWx1ZScpO1xuICAgICAgfVxuICAgICAgaWYgKHVuZGVmaW5lZCA9PT0gYXJnMyB8fCAnc3RyaW5nJyA9PT0gdHlwZW9mIGFyZzMpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGVwZW5kZW5jaWVzIG11c3QgYmUgYW4gYXJyYXkgdmFsdWUnKTtcbiAgICAgIH1cbiAgICAgIHBhdGggPSBhcmcxO1xuICAgICAgbXRpbWUgPSBhcmcyO1xuICAgICAgZGVwZW5kZW5jaWVzID0gYXJnMztcbiAgICAgIGtleSA9IGFyZzQ7XG4gICAgfVxuICAgIC8vIGRvIGFkZFxuICAgIGF3YWl0IHN5bmMubG9jaygpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkZXBzID0gKGF3YWl0IGdldERlcGVuZGVuY2llcyhjb250ZXh0LCBrZXkpKS5zcGxpY2UoMCk7XG4gICAgICBsZXQgaW5kZXg6IG51bWJlcjtcbiAgICAgIHdoaWxlICgtMSAhPT0gKGluZGV4ID0gZGVwcy5maW5kSW5kZXgoZSA9PiBlLnNvdXJjZSA9PT0gcGF0aCkpKSB7XG4gICAgICAgIGRlcHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIGRlcHMucHVzaCh7XG4gICAgICAgIG10aW1lOiBtdGltZSxcbiAgICAgICAgc291cmNlOiBwYXRoLFxuICAgICAgICBkZXBlbmRlbmNpZXM6IGRlcGVuZGVuY2llc1xuICAgICAgfSk7XG4gICAgICBhd2FpdCBzdG9yZURlcGVuZGVuY2llcyhjb250ZXh0LCBkZXBzLCBrZXkpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzeW5jLnJlbGVhc2UoKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgZXh0SnMgPSAvXFwuanMkLztcblxuLy8gaW50ZXJmYWNlIFBhdGhNYXBwaW5nIHtcbi8vICAgW3BhdGg6IHN0cmluZ106IHN0cmluZ1xuLy8gfVxuXG5cbi8vIGNvbnN0IGlubGluZVZpZXdQbHVnaW4gPSAoYXN0OiB0Lk5vZGUsIHsgbWFwcGluZ3MgfSA6IHsgbWFwcGluZ3M6IFBhdGhNYXBwaW5nfSkgPT4ge1xuLy8gICB0LnRyYXZlcnNlKGFzdCwge1xuLy8gICAgIGVudGVyKG5vZGU6IHQuTm9kZSkge1xuLy8gICAgICAgaWYgKG5vZGUudHlwZVxuLy8gICAgIH1cbi8vICAgfSk7XG4vLyB9O1xuXG5pbnRlcmZhY2UgVG9JbmxpbmUge1xuICBodG1sUGF0aDogc3RyaW5nO1xuICBpZDogdC5JZGVudGlmaWVyO1xuICBzb3VyY2U6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIENhY2hlZEFzdCB7XG4gIG10aW1lOiBEYXRlLFxuICBhc3Q6IHQuTm9kZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5saW5lVmlldyhvcHRzOiBPcHRpb25zKTogRXhlY3V0b3Ige1xuICBpZiAoIW9wdHMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ29wdGlvbnMgbXV0IGJlIHNwZWNpZmllZCcpO1xuICB9XG4gIHJldHVybiBhc3luYyAodGFzazogVGFzaywgY29udGV4dDogQ29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHNvdXJjZVJvb3QgPSBmc3BhdGgubm9ybWFsaXplKGZzcGF0aC5pc0Fic29sdXRlKG9wdHMuc291cmNlUm9vdCkgPyBvcHRzLnNvdXJjZVJvb3QgOiBmc3BhdGguam9pbihjb250ZXh0LmJhc2VQYXRoLCBvcHRzLnNvdXJjZVJvb3QpKTtcbiAgICBjb25zdCBkaXN0Um9vdCA9IGZzcGF0aC5ub3JtYWxpemUoZnNwYXRoLmlzQWJzb2x1dGUob3B0cy5kaXN0Um9vdCkgPyBvcHRzLmRpc3RSb290IDogZnNwYXRoLmpvaW4oY29udGV4dC5iYXNlUGF0aCwgb3B0cy5kaXN0Um9vdCkpO1xuICAgIGNvbnN0IG5hbWUgPSB0YXNrLm5hbWU7XG4gICAgLy8gW2lubGluZWQganMgPC0tLSBqc10gY2FzZVxuICAgIGlmIChuYW1lIGluc3RhbmNlb2YgRmlsZU5hbWUgJiYgZXh0SnMudGVzdChuYW1lLnBhdGgpICYmIG5hbWUucGF0aC5zdGFydHNXaXRoKGRpc3RSb290KSkge1xuICAgICAgY29uc3Qgc3RhcnRUcyA9IERhdGUubm93KCk7XG4gICAgICAvLyBjb250ZXh0LmxvZygnYmFiZWw6ZG9wZWVzJywgdGFzaywgJ3N0YXJ0aW5nLi4uJyk7XG4gICAgICBjb25zdCBzb3VyY2VQYXRoID0gZnNwYXRoLnJlc29sdmUoZnNwYXRoLmpvaW4oc291cmNlUm9vdCwgZnNwYXRoLnJlbGF0aXZlKGRpc3RSb290LCBuYW1lLnBhdGgpKSk7XG4gICAgICBsZXQgc291cmNlVGFzayA9IFRhc2suZmlsZShzb3VyY2VQYXRoLCBjb250ZXh0LmJhc2VQYXRoKTtcbiAgICAgIGNvbnRleHQubG9nKCdiYWJlbDpkb3BlZXMnLCB0YXNrLCBgcmVzb2x2ZWQgc291cmNlID0+ICR7c291cmNlVGFzay5uYW1lfWApO1xuICAgICAgLy8gZXhlY3V0ZSBkZXBlbmRlbmN5ICgudHMpLCBwb3NzaWJseSB0cmlnZ2VyaW5nIHN1YmRlcGVuZGVuY2llcy4uLi5cbiAgICAgIHNvdXJjZVRhc2sgPSBhd2FpdCBjb250ZXh0LmV4ZWN1dGUoc291cmNlVGFzayk7XG4gICAgICBjb25zdCBzb3VyY2VOYW1lID0gPEZpbGVOYW1lPnNvdXJjZVRhc2submFtZTtcblxuICAgICAgbGV0IHRyeVVzaW5nQ2FjaGVkQXN0ID0gZmFsc2U7XG4gICAgICAvLyBjaGVjayBpZiBmaWxlIGFscmVhZHkgZXhpc3RzLi4uXG4gICAgICBsZXQgc291cmNlTXRpbWUgOiBEYXRlIHwgbnVsbCA9IG51bGw7XG4gICAgICBsZXQgbXRpbWUgPSBhd2FpdCBmc3Auc3RhdChuYW1lLnBhdGgpLnRoZW4oc3RhdHMgPT4gc3RhdHMubXRpbWUsICgpID0+IG51bGwpO1xuICAgICAgaWYgKG10aW1lKSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIHNvdXJjZSBpZiBvbGRlciAobm8gZGlyZWN0IG10aW1lIGFzIHNvbWUgZGVwZW5kZW5jeSBvZiB0aGUgc291cmNlIGNvdWxkIGhhdmUgY2hhbmdlZCBpbnN0ZWFkIG9mXG4gICAgICAgIC8vIHRoZSBzb3VyY2UgaXRzZWxmKS4uLlxuICAgICAgICBzb3VyY2VNdGltZSA9IGF3YWl0IGguZ2V0TXRpbWUoc291cmNlVGFzaywgY29udGV4dCk7XG4gICAgICAgIGlmIChzb3VyY2VNdGltZSAmJiBzb3VyY2VNdGltZSA8PSBtdGltZSkge1xuICAgICAgICAgIC8vIG5vIG5lZWQgdG8gcGFyc2UgYXN0IC0tPiBpdCBpcyB1bmNoYW5nZWQsIHRob3VnaCBpbmxpbmVkIGNvbnRlbnRzIG1heSBoYXZlIGNoYW5nZWQuLi5cbiAgICAgICAgICBjb250ZXh0LmxvZygndHlwZXNjcmlwdCcsIHRhc2ssICd1cCB0byBkYXRlJyk7XG4gICAgICAgICAgdHJ5VXNpbmdDYWNoZWRBc3QgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgY2FjaGVkQXN0OiB0Lk5vZGUgfCBudWxsID0gbnVsbDtcbiAgICAgIGlmIChzb3VyY2VNdGltZSAmJiB0cnlVc2luZ0NhY2hlZEFzdCkge1xuICAgICAgICBjb25zdCBjYWNoZSA9IGF3YWl0IGNvbnRleHQuc3RvcmFnZS5nZXRPYmplY3Q8Q2FjaGVkQXN0PihgIWJhYmVsOmFzdCEke3NvdXJjZU5hbWUucGF0aH1gKTtcbiAgICAgICAgaWYgKGNhY2hlICYmIGNhY2hlLm10aW1lID49IHNvdXJjZU10aW1lKSB7XG4gICAgICAgICAgY2FjaGVkQXN0ID0gY2FjaGUuYXN0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBiYWJlbE9wdGlvbnMgOiBiYWJlbC5PcHRpb25zID0ge1xuICAgICAgICBmaWxlbmFtZTogbmFtZS5wYXRoLFxuICAgICAgICBhc3Q6IHRydWUsXG4gICAgICAgIHJvb3Q6IG5hbWUuYmFzZVBhdGggfHwgY29udGV4dC5iYXNlUGF0aCxcbiAgICAgICAgcm9vdE1vZGU6ICdyb290JyxcbiAgICAgICAgcGx1Z2luczogWydAYmFiZWwvc3ludGF4LWR5bmFtaWMtaW1wb3J0J10sXG4gICAgICAgIGlucHV0U291cmNlTWFwOiB0cnVlLFxuICAgICAgICBzb3VyY2VNYXBzOiAnaW5saW5lJyxcbiAgICAgICAgcGFyc2VyT3B0czoge1xuICAgICAgICAgIHNvdXJjZVR5cGU6ICdtb2R1bGUnXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBsZXQgYXN0OiB0Lk5vZGU7XG4gICAgICBsZXQgc291cmNlQ29kZTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gICAgICBpZiAoY2FjaGVkQXN0KSB7XG4gICAgICAgIGNvbnRleHQubG9nKCdiYWJlbDpkb3BlZXMnLCB0YXNrLCAndXNpbmcgY2FjaGVkIGFzdCcpO1xuICAgICAgICBhc3QgPSBjYWNoZWRBc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzb3VyY2VDb2RlID0gYXdhaXQgY29udGV4dC5nZXRDb250ZW50cyhzb3VyY2VUYXNrLCAndXRmLTgnKTtcbiAgICAgICAgY29udGV4dC5sb2coJ2JhYmVsOmRvcGVlcycsIHRhc2ssICdwYXJzaW5nLi4uJyk7XG4gICAgICAgIGFzdCA9IGF3YWl0IGJhYmVsLnBhcnNlQXN5bmMoc291cmNlQ29kZSwgYmFiZWxPcHRpb25zKTtcbiAgICAgICAgY29udGV4dC5sb2coJ2JhYmVsOmRvcGVlcycsIHRhc2ssICdkb25lIHBhcnNpbmcnKTtcbiAgICAgICAgaWYgKHNvdXJjZU10aW1lKSB7XG4gICAgICAgICAgYXdhaXQgY29udGV4dC5zdG9yYWdlLnNldE9iamVjdChgIWJhYmVsOmFzdCEke3NvdXJjZU5hbWUucGF0aH1gLCA8Q2FjaGVkQXN0PnsgbXRpbWU6IHNvdXJjZU10aW1lLCBhc3QgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGNvbGxlY3QgaW5saW5lYWJsZXNcbiAgICAgIGNvbnN0IHRvSW5saW5lIDogVG9JbmxpbmVbXSA9IFtdO1xuICAgICAgZmluZERlZmF1bHRJbXBvcnRzKGFzdCwgKGRlY2w6IERlZmF1bHRJbXBvcnREYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgaWQsIHNvdXJjZSB9ID0gZGVjbDtcbiAgICAgICAgaWYgKHNvdXJjZS5lbmRzV2l0aCgnLnB1ZycpKSB7XG4gICAgICAgICAgLy8gZ2V0IGZ1bGwgcGF0aCBvZiB0aGUgaW5jbHVkZVxuICAgICAgICAgIGNvbnN0IGluaXRpYWxGb2xkZXIgPSBmc3BhdGguZGlybmFtZSgoPEZpbGVOYW1lPnNvdXJjZVRhc2submFtZSkucGF0aCk7XG4gICAgICAgICAgY29uc3QgaHRtbFBhdGggPSBmc3BhdGgubm9ybWFsaXplKGZzcGF0aC5qb2luKGluaXRpYWxGb2xkZXIsIHNvdXJjZS5yZXBsYWNlKC9cXC5wdWckLywgJy5odG1sJykpKTtcbiAgICAgICAgICB0b0lubGluZS5wdXNoKHsgaHRtbFBhdGgsIGlkLCBzb3VyY2UgfSlcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb25zdCBodG1sczogc3RyaW5nW10gPSBbXTtcbiAgICAgIGNvbnN0IHN1YnRhc2tzOiBUYXNrW10gPSBbXTtcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKHRvSW5saW5lLm1hcChhc3luYyAoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgcmVsYXRpdmVQYXRoID0gZnNwYXRoLnJlbGF0aXZlKGNvbnRleHQuYmFzZVBhdGgsIGl0ZW0uaHRtbFBhdGgpO1xuICAgICAgICBjb25zdCBzdWJ0YXNrID0gVGFzay5maWxlKHJlbGF0aXZlUGF0aCwgY29udGV4dC5iYXNlUGF0aCk7XG4gICAgICAgIHN1YnRhc2tzW2luZGV4XSA9IHN1YnRhc2s7XG4gICAgICAgIGh0bWxzW2luZGV4XSA9IGF3YWl0IGNvbnRleHQuZ2V0Q29udGVudHMoYXdhaXQgY29udGV4dC5leGVjdXRlKHN1YnRhc2spLCAndXRmLTgnKTtcbiAgICAgIH0pKTtcbiAgICAgIGNvbnRleHQubG9nKCdiYWJlbDpkb3BlZXMnLCB0YXNrLCAnaW5saW5pbmcnKTtcbiAgICAgIC8vIGFsbCBjYWhuZ2VzIGFyZSBwZXJmb3JtZWQgb24gY29weSwgb3JpZ2luYWwgYXN0IGlzIGNhY2hlZC4uLlxuICAgICAgYXN0ID0gdC5jbG9uZURlZXAoYXN0KTtcbiAgICAgIC8vIGlubGluZSB2aWV3cy5cbiAgICAgIGZpbmREZWZhdWx0SW1wb3J0cyhhc3QsIChkZWNsOiBEZWZhdWx0SW1wb3J0RGF0YSwgcGF0aDogVHJhdmVyc2VQYXRoPHQuSW1wb3J0RGVjbGFyYXRpb24+KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgaWQsIHNvdXJjZSB9ID0gZGVjbDtcbiAgICAgICAgY29uc3QgaW5saW5lYWJsZUluZGV4ID0gdG9JbmxpbmUuZmluZEluZGV4KGUgPT4gZS5pZC5uYW1lID09PSBpZC5uYW1lICYmIGUuc291cmNlID09PSBzb3VyY2UpO1xuICAgICAgICBpZiAoLTEgIT09IGlubGluZWFibGVJbmRleCkge1xuICAgICAgICAgIGNvbnRleHQubG9nKCdiYWJlbDpkb3BlZXMnLCB0YXNrLCBgaW5saW5pbmcgJHtzb3VyY2V9YCk7XG4gICAgICAgICAgY29uc3QgaHRtbCA9IGh0bWxzW2lubGluZWFibGVJbmRleF07XG4gICAgICAgICAgcGF0aC5yZXBsYWNlV2l0aChcbiAgICAgICAgICAgIHQudmFyaWFibGVEZWNsYXJhdGlvbignY29uc3QnLCBbXG4gICAgICAgICAgICAgIHQudmFyaWFibGVEZWNsYXJhdG9yKFxuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIHQuc3RyaW5nTGl0ZXJhbChodG1sKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gZW5zdXJlIC5qcyBpbiBpbXBvcnRzXG4gICAgICB3YWxrQWxsRGVwZW5kZW5jaWVzKGFzdCwgKG5vZGU6IHQuSW1wb3J0RGVjbGFyYXRpb24pID0+IHtcbiAgICAgICAgY29uc3QgaW1wb3J0UGF0aCA9IG5vZGUuc291cmNlLnZhbHVlO1xuICAgICAgICBpZiAoaW1wb3J0UGF0aCAmJiAhaW1wb3J0UGF0aC5lbmRzV2l0aCgnLmpzJykpIHtcbiAgICAgICAgICBpZiAodHJ1ZSA9PT0gb3B0cy51cGRhdGVFeHRlcm5hbEltcG9ydHMgJiYgIWltcG9ydFBhdGguc3RhcnRzV2l0aCgnLi8nKSAmJiAhaW1wb3J0UGF0aC5zdGFydHNXaXRoKCcuLi8nKSkge1xuICAgICAgICAgICAgbGV0IHRhcmdldCA9IGZzcGF0aC5qb2luKGZzcGF0aC5yZWxhdGl2ZShmc3BhdGguZGlybmFtZShuYW1lLnBhdGgpLCBvcHRzLmRpc3RSb290KSwgaW1wb3J0UGF0aCArICcuanMnKTtcbiAgICAgICAgICAgIC8vIHNhbWUgZm9sZGVyIGRlcGVuZGVuY2llcyBzaG91bGQgc3RhcnQgd2l0aCAuL1xuICAgICAgICAgICAgaWYgKCF0YXJnZXQuc3RhcnRzV2l0aCgnLi4nKSkge1xuICAgICAgICAgICAgICB0YXJnZXQgPSAnLi8nICsgdGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZS5zb3VyY2UudmFsdWUgPSB0YXJnZXQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUuc291cmNlLnZhbHVlICs9ICcuanMnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9KVxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgYmFiZWwudHJhbnNmb3JtRnJvbUFzdEFzeW5jKGFzdCwgc291cmNlQ29kZSB8fCBhd2FpdCBjb250ZXh0LmdldENvbnRlbnRzKHNvdXJjZVRhc2ssICd1dGYtOCcpLCBiYWJlbE9wdGlvbnMpO1xuICAgICAgY29udGV4dC5sb2coJ2JhYmVsOmRvcGVlcycsIHRhc2ssICdzdG9yaW5nIGpzJyk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250ZXh0LnNhdmVDb250ZW50cyh0YXNrLCBCdWZmZXIuZnJvbShyZXMuY29kZSwgJ3V0Zi04JyksIHRydWUpO1xuICAgICAgLy8gc2F2ZSBvdXRwdXQgYXN0XG4gICAgICBhd2FpdCBjb250ZXh0LnN0b3JhZ2Uuc2V0T2JqZWN0KGAhYmFiZWw6YXN0ISR7bmFtZS5wYXRofWAsIDxDYWNoZWRBc3Q+eyBtdGltZSwgYXN0IH0pXG4gICAgICBjb250ZXh0LmxvZygnYmFiZWw6ZG9wZWVzJywgdGFzaywgJ2RvbmUnLCBEYXRlLm5vdygpIC0gc3RhcnRUcyk7XG4gICAgICAvLyBjb2xsZWN0IGFsbCBkZXBlcG5kZW5jaWVzIGlmIHJlcXVlc3RlZFxuICAgICAgaWYgKHRydWUgPT09IG9wdHMuc2F2ZUFsbERlcGVuZGVuY2llcykge1xuICAgICAgICBjb25zdCBkZXBzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBmaW5kQWxsRGVwZW5kZW5jaWVzKGFzdCwgKHNvdXJjZTogc3RyaW5nKSA9PiBkZXBzLnB1c2goc291cmNlKSk7XG4gICAgICAgIGF3YWl0IERlcGVuZGVuY3lIZWxwZXIuc2V0RGVwZW5kZW5jaWVzKGNvbnRleHQsIHRhc2ssIGRlcHMsIG9wdHMuYWxsRGVwZW5kZW5jaWVzS2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9O1xufVxuIl19